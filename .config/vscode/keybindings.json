[
  // === Terminal settings
  {
    // Terminalのフォーカスを前に戻す
    "key": "ctrl+shift+k",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocus"
  },
  {
    // Terminalのフォーカスを次に移す
    "key": "ctrl+shift+j",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocus"
  },
  // === Control panel
  {
    "key": "ctrl+shift+a",
    "command": "workbench.action.toggleMaximizedPanel"
  },
  {
    "key": "ctrl+space",
    "command": "-editor.action.triggerSuggest",
    "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
},
// === Extension: VSpaceCode
// 以下の設定は、VSpaceCodeが自動で設定した内容
{
	"key": "space",
	"command": "vspacecode.space",
	"when": "activeEditorGroupEmpty && focusedView == '' && !whichkeyActive && !inputFocus"
},
{
	"key": "space",
	"command": "vspacecode.space",
	"when": "sideBarFocus && !inputFocus && !whichkeyActive"
},
{
	"key": "tab",
	"command": "extension.vim_tab",
	"when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert' && editorLangId != 'magit'"
},
{
	"key": "tab",
	"command": "-extension.vim_tab",
	"when": "editorTextFocus && vim.active && !inDebugRepl && vim.mode != 'Insert'"
},
{
	"key": "x",
	"command": "magit.discard-at-point",
	"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
},
{
	"key": "k",
	"command": "-magit.discard-at-point"
},
{
	"key": "-",
	"command": "magit.reverse-at-point",
	"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
},
{
	"key": "v",
	"command": "-magit.reverse-at-point"
},
{
	"key": "shift+-",
	"command": "magit.reverting",
	"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
},
{
	"key": "shift+v",
	"command": "-magit.reverting"
},
{
	"key": "shift+o",
	"command": "magit.resetting",
	"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
},
{
	"key": "shift+x",
	"command": "-magit.resetting"
},
{
	"key": "x",
	"command": "-magit.reset-mixed"
},
{
	"key": "ctrl+u x",
	"command": "-magit.reset-hard"
},
{
	"key": "y",
	"command": "-magit.show-refs"
},
{
	"key": "y",
	"command": "vspacecode.showMagitRefMenu",
	"when": "editorTextFocus && editorLangId == 'magit' && vim.mode == 'Normal'"
},
{
	"key": "g",
	"command": "-magit.refresh",
	"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
},
{
	"key": "g",
	"command": "vspacecode.showMagitRefreshMenu",
	"when": "editorTextFocus && editorLangId == 'magit' && vim.mode =~ /^(?!SearchInProgressMode|CommandlineInProgress).*$/"
},
{
	"key": "ctrl+j",
	"command": "workbench.action.quickOpenSelectNext",
	"when": "inQuickOpen"
},
{
	"key": "ctrl+k",
	"command": "workbench.action.quickOpenSelectPrevious",
	"when": "inQuickOpen"
},
{
	"key": "ctrl+j",
	"command": "selectNextSuggestion",
	"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
},
{
	"key": "ctrl+k",
	"command": "selectPrevSuggestion",
	"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
},
{
	"key": "ctrl+l",
	"command": "acceptSelectedSuggestion",
	"when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
},
{
	"key": "ctrl+j",
	"command": "showNextParameterHint",
	"when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
},
{
	"key": "ctrl+k",
	"command": "showPrevParameterHint",
	"when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
},
{
	"key": "ctrl+j",
	"command": "selectNextCodeAction",
	"when": "codeActionMenuVisible"
},
{
	"key": "ctrl+k",
	"command": "selectPrevCodeAction",
	"when": "codeActionMenuVisible"
},
{
	"key": "ctrl+l",
	"command": "acceptSelectedCodeAction",
	"when": "codeActionMenuVisible"
},
{
	"key": "ctrl+h",
	"command": "file-browser.stepOut",
	"when": "inFileBrowser"
},
{
	"key": "ctrl+l",
	"command": "file-browser.stepIn",
	"when": "inFileBrowser"
}
]
